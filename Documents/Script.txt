Create SampleApp.WebApi empty web api project
Install packages:
  Install-Package Microsoft.AspNet.WebApi.Owin -Project SampleApp.WebApi
  Install-Package Microsoft.Owin.Host.SystemWeb -Project SampleApp.WebApi
Create startup.cs:
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            var config = CreateHttpConfiguration();
            app.UseWebApi(config);
        }

        private HttpConfiguration CreateHttpConfiguration()
        {
            var config = new HttpConfiguration();
            WebApiConfig.Register(config);
            return config;
        }
    }
Delete Global.asax

Create SampleApp.Specs class library
Install Nuget Packages:
Install-Package SpecFlow.NUnit -Project SampleApp.Specs
Install-Package Microsoft.Owin.Testing -Project SampleApp.Specs
Install-Package FluentAssertions -Project SampleApp.Specs
Install-Package Microsoft.AspNet.WebApi.Core -Project SampleApp.Specs



Create Feature File:
Feature: GetFormattedDate

Scenario: Get formatted date in english
	When I request the formatted date '2017-03-20T12:00:01.00Z' for language 'en-GB'
	Then the response status code should be 'OK'
	And the response formatted date should be
	"""
	{
		"date" : "2017-03-20T12:00:01.00Z",
		"language" : "en-GB",
		"formattedDate" : "20 March 2017 12:00:01"
	}
	"""
Scenario: Get formatted date in spanish
	When I request the formatted date '2017-03-20T12:00:01.00Z' for language 'es-ES'
	Then the response status code should be 'OK'
	And the response formatted date should be
	"""
	{
		"date" : "2017-03-20T12:00:01.00Z",
		"language" : "es-ES",
		"formattedDate" : "lunes, 20 de marzo de 2017 12:00:01"
	}
	"""

Create Steps File
Implement first two steps (tests should fail not being able to inject HttpClient)
Configure specflow project to use TestServer (tests should fail expecting OK but getting NotFound)
Create controller and just return OK  (tests should fail with inconclusive)
Implement remaining step and its transform (tests should fail with response content was null)
Implement controller logic (tests should pass)


ConfigurationBinding:
    [Binding]
    public class ConfigurationBinding
    {
        private readonly IObjectContainer _objectContainer;

        public ConfigurationBinding(IObjectContainer objectContainer)
        {
            _objectContainer = objectContainer;
        }

        [BeforeScenario]
        public void InitializeDependencies()
        {
            var testServer = CreateTestServer();
            _objectContainer.RegisterInstanceAs(testServer);
            _objectContainer.RegisterInstanceAs(testServer.HttpClient);
        }

        [AfterScenario]
        public void CleanDependencies()
        {
            var testServer = _objectContainer.Resolve<TestServer>();
            testServer.Dispose();
        }

        private static TestServer CreateTestServer()
        {
            var testServer = TestServer.Create(appBuilder =>
            {
                var startup = new Startup();
                startup.Configuration(appBuilder);
            });
            testServer.BaseAddress = new Uri("http://sampleapp.localhost");
            return testServer;
        }
    }
